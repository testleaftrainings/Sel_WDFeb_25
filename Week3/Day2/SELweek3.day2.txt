


What is an Alert in Selenium?


An Alert in Selenium WebDriver is a small message box that appears on the screen to give the user information or ask for permission to perform an operation.
https://leafground.com/alert.xhtml

It's typically a JavaScript-based window that can show warnings, ask for confirmations, or prompt for information.



Why are Alerts Used?


Alerts are used in web applications to:

    Notify users: Provide important information or warnings.
    Get confirmations: Confirm user actions before proceeding.
    Collect input: Gather information or feedback from users.
    
Types of Alerts


A)Modal Alerts: These are traditional JavaScript alerts that are not part of the HTML DOM.

Simple Alert: Displays an information message with an OK button.

Confirmation Alert: Presents a message with OK and Cancel buttons to accept or reject an option.

Prompt Alert: Offers an input field along with OK and Cancel buttons, allowing user input.

B)Non-Modal Alert (Sweet Alert): These are more modern, customizable alerts that are part of the HTML DOM and can be inspected.



Handling Alerts in Selenium:

    Focus Transfer: To interact with an alert, Selenium transfers focus to the alert box using driver.switchTo().alert().
    
    Return Type: The return type for this operation is the Alert interface.
    
    
    Implementation Class: Selenium implements this functionality through the RemoteAlert class.



Alert Interface Actions

    accept(): Clicks the 'OK' button on the alert.
        dismiss(): Clicks the 'Cancel' button, used for dismissing the alert.
            getText(): Retrieves the text displayed on the alert box.
                    sendKeys(String keysToSend): Sends a string input to the alert, used in prompt alerts.

Special Case: Handling Sweet Alerts

Sweet Alerts are part of the HTML content and can be handled like any other web element. They require standard methods for interacting with web elements, unlike traditional JavaScript alerts.



Exceptions Related to Alerts in Selenium:


    NoAlertPresentException: This exception is thrown when an operation is attempted on an alert, but there is no alert present.
        UnhandledAlertException: This exception is thrown when there is an alert that Selenium is unable to handle, either because it wasnâ€™t expected, or because the driver cannot interact with it.



----------------------------------------------------------------

What is a Frame?

A frame is a part of a web page or browser window which displays content independent of its container, with its own scroll and navigation.
It's essentially a document within a document, commonly used to embed a separate document within a web page.

Why Handle Frames?

Frames must be handled because Selenium WebDriver operates on a single document context.
If a web page contains frames, WebDriver cannot automatically access the content of these frames.
To interact with elements within a frame, WebDriver must switch to it explicitly.

How to Identify a Frame?

Frames can be identified by right-clicking on the element and selecting "View Frame Source" for direct URLs or by searching for the frame or iframe tags within the HTML DOM.

Structure of Frame

When you inspect a web page, you'll notice that the frame or iframe tags define the frame structure. Each frame will have its own HTML document, which can be navigated and manipulated independently of the main page.

How to Handle Frames?

To handle frames, use the switchTo() method provided by WebDriver.

By index: driver.switchTo().frame(int index)
By Name or ID: driver.switchTo().frame(String nameOrId)
By Reference: driver.switchTo().frame(WebElement frameElement)
Once you're done with the frame and need to switch back to the main content, use:

driver.switchTo().defaultContent()


And to switch to the immediate parent frame, 

use:
driver.switchTo().parentFrame()


How to Handle Nested Frames ?

Nested frames are handled by switching into each frame sequentially. After interacting with the deepest frame, you need to switch back to the parent frame or main document to continue the automation tasks.

For handling nested frames, you would use a sequence of switchTo().frame() calls to drill down into the nested structure, and use switchTo().parentFrame() or switchTo().defaultContent() to navigate back up.

Exception:

NoSuchFrameException in Selenium is thrown when the WebDriver attempts to switch to a non-existent frame. 

- This can happen if the frame has been removed or if it never existed in the DOM at the point of the attempt. 
- It indicates that the specified frame is not present in the current page context, and the automation script needs to ensure that the frame name, ID, or reference being used to switch to is correct and available.
-This exception is a signal to check the frame's existence, its correct identification, or if the page has fully loaded before attempting to switch frames.


----------------------------------------------------------------------------------------------------------------------------------------------


JavascriptExecutor



In Selenium, the JavascriptExecutor interface is used to execute JavaScript code in the context of the browser. Here are the various ways to initialize and use JavascriptExecutor in Selenium Java:

1)Using Explicit Casting
The most common way to initialize JavascriptExecutor is by explicitly casting the WebDriver instance:


    JavascriptExecutor js = (JavascriptExecutor) driver;

2.Direct Use Without a Separate Variable
You can directly cast and use the JavascriptExecutor without assigning it to a variable

    ((JavascriptExecutor) driver).executeScript(String script, Object... args);

        The executeScript() method in Selenium Java allows you to execute custom JavaScript code directly in the browser during test automation(it will directly make the API CALL). This provides flexibility to perform operations that might not be possible using standard Selenium WebDriver APIs. Below are various use cases for executeScript():


1. Interacting with Hidden or Disabled Elements

    Sometimes, elements are not visible or disabled in the DOM but need to be interacted with for testing purposes.

    .executeScript("arguments[0].click();", element);

2. Scrolling the Page

    Scroll the page to a specific position or an element.

        
        .executeScript("arguments[0].scrollIntoView(true);", element);
        .executeScript("window.scrollBy(0,1000);");
            window.scrollBy(x, y) is a JavaScript function that scrolls the document by a given number of pixels relative to the current position:

            x: The number of pixels to scroll horizontally (positive values scroll to the right, negative values to the left).
            y: The number of pixels to scroll vertically (positive values scroll down, negative values scroll up).
            In your example:

            x = 0: No horizontal scrolling.
            y = 1000: Scrolls vertically down by 1000 pixels.


3. Retrieving the Page Title or Other Properties

    Get the page title or other JavaScript-accessible properties.
    String title = (String) ((JavascriptExecutor) driver).executeScript("return document.title;");
    
    System.out.println("Page Title: " + title);

4. Handling Alerts
    Triggering or managing browser alerts.

    ((JavascriptExecutor) driver).executeScript("alert('This is a test alert');");

5. Force Page Refresh or Navigation
    
    Force reload or navigate without using WebDriver.
    ((JavascriptExecutor) driver).executeScript("location.reload();");

6. Manipulating Element Attributes
    
    
    Modify attributes of a DOM element.
    If sendKeys() is not working means we can go with it 

    ((JavascriptExecutor) driver).executeScript("arguments[0].setAttribute('value', 'New Value');", element);
























