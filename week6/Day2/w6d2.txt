
For Sequential Execution:
---------------------------
- Driver declaration should be static
- Create 2 testcases inside testcases package
     runLogin
     runCreateLead
- Select the required testcases and convert into testng.xml file
- Finally, run the testcases together sequentially from testng.xml file






For Parallel Execution:
-----------------------
    - Remove static keyword in BaseClass
    - Create parameterized constructor in each pages
       public LoginPage(ChromeDriver driver) {
        //this keyword-used in variable level
        this.driver- its coming from PSM or BaseClass
        driver- local variable
	        this.driver=driver;
         }
    - Pass driver value in each Constructor initialization in each pages and testcases
return new HomePage(driver);

//if static removed from driver -null pointer 
//i am having static keyword i cannot perform parallel

its possible  to run both seq and parallel





Cucumber with POM:
------------------
 - Create 4 packages
     - base
        Create BaseClass with common methods
        BaseClass should extend AbstractTestNGCucumberTests
     - features
         Create feature files
     - pages
        Create classes for each page and each page should extend BaseClass
     - runner
        Create CucumberRunner class and , mention glue="pages"
        The runner class should extend BaseClass



Thread :


The Thread class in Java is used for creating and managing threads, which enable concurrent execution of tasks. 


Pom-ThreadLocal:
---------------
private-a variable which is accessible only within that class
static-one instance will be shared among all the classes
final-variable once initialized cannot be changed.
Steps: 1. private static final ThreadLocal<RemoteWebDriver> cDriver = new ThreadLocal<RemoteWebDriver>();

 private:
   It can be accessed only within the class
 static final:
    static+final = constant
 ThreadLocal:
   It is a class that provides thread-local variable

2. Use setter and getter methods
     Sets the current thread's copy of this thread-local variable

      public void setDriver() {
	cDriver.set(new ChromeDriver());

}
 Returns the value in the current thread's copy of this thread-local variable   
public RemoteWebDriver getDriver() {
	return cDriver.get();
}

@BeforeMethod
public void precondition(){
  setDriver();
  then replace driver variable into getDriver()
  getDriver().manage.window.max();
}

For TestNG _POM : - with driver as static -> sequential execution is possible
 - To have sequential and parallel execution declare Parameterized Constructor in each pages

For Cucumber_POM: 
- Constructor should not be defined 
- With driver as static 
-> sequential execution is possible
